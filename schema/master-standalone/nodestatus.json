{
  "description": "NodeStatus is information about the current status of a node.",
  "properties": {
    "addresses": {
      "description": "List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.",
      "items": {
        "description": "NodeAddress contains information for the node's address.",
        "properties": {
          "address": {
            "description": "The node address.",
            "type": "string"
          },
          "type": {
            "description": "Node address type, one of Hostname, ExternalIP or InternalIP.\n\nPossible enum values:\n - `\"ExternalDNS\"` identifies a DNS name which resolves to an IP address which has the characteristics of a NodeExternalIP. The IP it resolves to may or may not be a listed NodeExternalIP address.\n - `\"ExternalIP\"` identifies an IP address which is, in some way, intended to be more usable from outside the cluster then an internal IP, though no specific semantics are defined. It may be a globally routable IP, though it is not required to be. External IPs may be assigned directly to an interface on the node, like a NodeInternalIP, or alternatively, packets sent to the external IP may be NAT'ed to an internal node IP rather than being delivered directly (making the IP less efficient for node-to-node traffic than a NodeInternalIP).\n - `\"Hostname\"` identifies a name of the node. Although every node can be assumed to have a NodeAddress of this type, its exact syntax and semantics are not defined, and are not consistent between different clusters.\n - `\"InternalDNS\"` identifies a DNS name which resolves to an IP address which has the characteristics of a NodeInternalIP. The IP it resolves to may or may not be a listed NodeInternalIP address.\n - `\"InternalIP\"` identifies an IP address which is assigned to one of the node's network interfaces. Every node should have at least one address of this type. An internal IP is normally expected to be reachable from every other node, but may not be visible to hosts outside the cluster. By default it is assumed that kube-apiserver can reach node internal IPs, though it is possible to configure clusters where this is not the case. NodeInternalIP is the default type of node IP, and does not necessarily imply that the IP is ONLY reachable internally. If a node has multiple internal IPs, no specific semantics are assigned to the additional IPs.",
            "enum": [
              "ExternalDNS",
              "ExternalIP",
              "Hostname",
              "InternalDNS",
              "InternalIP"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "address"
        ],
        "type": [
          "object",
          "null"
        ]
      },
      "type": [
        "array",
        "null"
      ],
      "x-kubernetes-patch-merge-key": "type",
      "x-kubernetes-patch-strategy": "merge"
    },
    "allocatable": {
      "additionalProperties": {
        "oneOf": [
          {
            "type": [
              "string",
              "null"
            ]
          },
          {
            "type": [
              "number",
              "null"
            ]
          }
        ]
      },
      "description": "Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.",
      "type": [
        "object",
        "null"
      ]
    },
    "capacity": {
      "additionalProperties": {
        "oneOf": [
          {
            "type": [
              "string",
              "null"
            ]
          },
          {
            "type": [
              "number",
              "null"
            ]
          }
        ]
      },
      "description": "Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity",
      "type": [
        "object",
        "null"
      ]
    },
    "conditions": {
      "description": "Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition",
      "items": {
        "description": "NodeCondition contains condition information for a node.",
        "properties": {
          "lastHeartbeatTime": {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "lastTransitionTime": {
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "message": {
            "description": "Human readable message indicating details about last transition.",
            "type": [
              "string",
              "null"
            ]
          },
          "reason": {
            "description": "(brief) reason for the condition's last transition.",
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "description": "Status of the condition, one of True, False, Unknown.",
            "type": "string"
          },
          "type": {
            "description": "Type of node condition.\n\nPossible enum values:\n - `\"DiskPressure\"` means the kubelet is under pressure due to insufficient available disk.\n - `\"MemoryPressure\"` means the kubelet is under pressure due to insufficient available memory.\n - `\"NetworkUnavailable\"` means that network for the node is not correctly configured.\n - `\"PIDPressure\"` means the kubelet is under pressure due to insufficient available PID.\n - `\"Ready\"` means kubelet is healthy and ready to accept pods.",
            "enum": [
              "DiskPressure",
              "MemoryPressure",
              "NetworkUnavailable",
              "PIDPressure",
              "Ready"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "status"
        ],
        "type": [
          "object",
          "null"
        ]
      },
      "type": [
        "array",
        "null"
      ],
      "x-kubernetes-patch-merge-key": "type",
      "x-kubernetes-patch-strategy": "merge"
    },
    "config": {
      "description": "NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.",
      "properties": {
        "active": {
          "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22",
          "properties": {
            "configMap": {
              "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration",
              "properties": {
                "kubeletConfigKey": {
                  "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "uid": {
                  "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "namespace",
                "name",
                "kubeletConfigKey"
              ],
              "type": [
                "object",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ]
        },
        "assigned": {
          "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22",
          "properties": {
            "configMap": {
              "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration",
              "properties": {
                "kubeletConfigKey": {
                  "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "uid": {
                  "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "namespace",
                "name",
                "kubeletConfigKey"
              ],
              "type": [
                "object",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ]
        },
        "error": {
          "description": "Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.",
          "type": [
            "string",
            "null"
          ]
        },
        "lastKnownGood": {
          "description": "NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22",
          "properties": {
            "configMap": {
              "description": "ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration",
              "properties": {
                "kubeletConfigKey": {
                  "description": "KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.",
                  "type": "string"
                },
                "resourceVersion": {
                  "description": "ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "uid": {
                  "description": "UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "required": [
                "namespace",
                "name",
                "kubeletConfigKey"
              ],
              "type": [
                "object",
                "null"
              ]
            }
          },
          "type": [
            "object",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ]
    },
    "daemonEndpoints": {
      "description": "NodeDaemonEndpoints lists ports opened by daemons running on the Node.",
      "properties": {
        "kubeletEndpoint": {
          "description": "DaemonEndpoint contains information about a single Daemon endpoint.",
          "properties": {
            "Port": {
              "description": "Port number of the given endpoint.",
              "format": "int32",
              "type": "integer"
            }
          },
          "required": [
            "Port"
          ],
          "type": [
            "object",
            "null"
          ]
        }
      },
      "type": [
        "object",
        "null"
      ]
    },
    "images": {
      "description": "List of container images on this node",
      "items": {
        "description": "Describe a container image",
        "properties": {
          "names": {
            "description": "Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"]",
            "items": {
              "type": [
                "string",
                "null"
              ]
            },
            "type": [
              "array",
              "null"
            ]
          },
          "sizeBytes": {
            "description": "The size of the image in bytes.",
            "format": "int64",
            "type": [
              "integer",
              "null"
            ]
          }
        },
        "type": [
          "object",
          "null"
        ]
      },
      "type": [
        "array",
        "null"
      ]
    },
    "nodeInfo": {
      "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
      "properties": {
        "architecture": {
          "description": "The Architecture reported by the node",
          "type": "string"
        },
        "bootID": {
          "description": "Boot ID reported by the node.",
          "type": "string"
        },
        "containerRuntimeVersion": {
          "description": "ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).",
          "type": "string"
        },
        "kernelVersion": {
          "description": "Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).",
          "type": "string"
        },
        "kubeProxyVersion": {
          "description": "KubeProxy Version reported by the node.",
          "type": "string"
        },
        "kubeletVersion": {
          "description": "Kubelet Version reported by the node.",
          "type": "string"
        },
        "machineID": {
          "description": "MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html",
          "type": "string"
        },
        "operatingSystem": {
          "description": "The Operating System reported by the node",
          "type": "string"
        },
        "osImage": {
          "description": "OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).",
          "type": "string"
        },
        "systemUUID": {
          "description": "SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid",
          "type": "string"
        }
      },
      "required": [
        "machineID",
        "systemUUID",
        "bootID",
        "kernelVersion",
        "osImage",
        "containerRuntimeVersion",
        "kubeletVersion",
        "kubeProxyVersion",
        "operatingSystem",
        "architecture"
      ],
      "type": [
        "object",
        "null"
      ]
    },
    "phase": {
      "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.\n\nPossible enum values:\n - `\"Pending\"` means the node has been created/added by the system, but not configured.\n - `\"Running\"` means the node has been configured and has Kubernetes components running.\n - `\"Terminated\"` means the node has been removed from the cluster.",
      "enum": [
        "Pending",
        "Running",
        "Terminated"
      ],
      "type": [
        "string",
        "null"
      ]
    },
    "volumesAttached": {
      "description": "List of volumes that are attached to the node.",
      "items": {
        "description": "AttachedVolume describes a volume attached to a node",
        "properties": {
          "devicePath": {
            "description": "DevicePath represents the device path where the volume should be available",
            "type": "string"
          },
          "name": {
            "description": "Name of the attached volume",
            "type": "string"
          }
        },
        "required": [
          "name",
          "devicePath"
        ],
        "type": [
          "object",
          "null"
        ]
      },
      "type": [
        "array",
        "null"
      ]
    },
    "volumesInUse": {
      "description": "List of attachable volumes in use (mounted) by the node.",
      "items": {
        "type": [
          "string",
          "null"
        ]
      },
      "type": [
        "array",
        "null"
      ]
    }
  },
  "type": "object",
  "$schema": "http://json-schema.org/schema#"
}